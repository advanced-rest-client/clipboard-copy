{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "An element that copies a text to clipboard.\n\n### Example\n\n```html\n<clipboard-copy content=\"test\"></clipboard-copy>\n<script>\nconst elm = document.querySelectior('clipboard-copy');\nif(elm.copy()) {\n console.info('Content has been copied to the clipboard');\n} else {\n console.error('Content copy error. This browser is ancient!');\n}\n< /script>\n```",
      "summary": "",
      "path": "clipboard-copy.js",
      "properties": [
        {
          "name": "content",
          "type": "string | null | undefined",
          "description": "A content to be copied to the clipboard.\nIt must be set before calling the `copy` function.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "copy",
          "description": "Execute content copy.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "True if the content has been copied to the clipboard\nand false if there was an error."
          }
        },
        {
          "name": "_beforeCopy",
          "description": "Sends the `content-copy` event.\nIf the event is canceled then the logic from this element won't be\nexecuted. Useful if current platform doesn't support `execCommand('copy')`\nand has other way to manage clipboard.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "True if handler executed copy function."
          }
        },
        {
          "name": "_notifyCopied",
          "description": "Sends the `content-copied` event that is not bubbling.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 129,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 157,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "LogicElements.ClipboardCopy",
      "attributes": [
        {
          "name": "content",
          "description": "A content to be copied to the clipboard.\nIt must be set before calling the `copy` function.",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "content-copied",
          "description": "Fired when the content has been copied to the clipboard.\n\nNote: You can use return value of the `copy()` function. If the return\nvalue is `true` then content has been copied to clipboard.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "content-copy",
          "description": "Fired when executing copy function.\nThis cancelable event is dispatched before running the actual logic\nof this element to support platforms that doesn't allow to manage\nclipboard with `execCommand('copy')`.\n\nWhen the event is canceled then the logic is not executed.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "content-copy-error",
          "description": "Fired when there was an error copying content to clipboard.\n\nNote: You can use return value of the `copy()` function. If the return\nvalue is `flase` then content has not been copied to clipboard.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "clipboard-copy"
    }
  ]
}
